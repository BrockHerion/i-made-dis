// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// imadedis.dev models
model Comment {
  id String @id @default(uuid()) @db.Char(36)

  @@map("comment")
}

model EntityType {
  id         String   @id @default(uuid()) @db.Char(36)
  name       String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")
  likes      Like[]

  @@map("entity_type")
}

model Like {
  id         String   @id @default(uuid()) @db.Char(36)
  liked      Boolean
  // ID of the entity this like applies to (project, comment, etc)
  // Note this is not an FK relationship
  entityId   String   @map("entity_id") @db.Char(36)
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  // Relations
  userId String @map("user_id") @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id])

  entityTypeId String     @map("entity_type_id") @db.VarChar(36)
  entityType   EntityType @relation(fields: [entityTypeId], references: [id])

  @@unique([userId, entityId])
  @@index([userId])
  @@index([entityId])
  @@index([entityTypeId])
  @@map("like")
}

model Project {
  id            String        @id @default(uuid()) @db.Char(36)
  name          String
  slug          String        @unique
  version       String?
  description   String?       @db.Text
  websiteUrl    String?       @map("website_url") @db.VarChar(2048)
  downloadUrl   String?       @map("download_url") @db.VarChar(2048)
  repositoryUrl String?       @map("repository_url") @db.VarChar(2048)
  status        ProjectStatus @default(PUBLIC)

  // Audit fields
  createdBy  String   @map("created_by") @db.Char(36)
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedBy String   @map("modified_by") @db.Char(36)
  modifiedAt DateTime @updatedAt @map("modified_at")

  // Relations
  userId String @map("user_id") @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id])

  tags ProjectTag[]

  @@unique([userId, name])
  @@map("project")
}

model ProjectTag {
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  projectId String  @map("project_id") @db.Char(36)
  project   Project @relation(fields: [projectId], references: [id])
  tagId     String  @map("tag_id") @db.Char(36)
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
  @@map("project_tag")
}

enum ProjectStatus {
  PUBLIC
  PRIVATE
}

model Tag {
  id      String @id @default(uuid()) @db.Char(36)
  content String @unique

  // Relations
  projects ProjectTag[]

  @@map("tag")
}

model Tech {
  id      String @id @default(uuid()) @db.Char(36)
  content String @unique

  @@map("tech")
}

model TechType {
  id         String   @id @default(uuid()) @db.Char(36)
  name       String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedAt DateTime @updatedAt @map("modified_at")

  @@map("tech_type")
}

model View {
  id    String @id @default(uuid()) @db.Char(36)
  slug  String @unique
  count Int

  @@map("view")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(uuid()) @db.Char(36)
  userId                   String  @db.Char(36)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int? // Necessary for GitHub
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid()) @db.Char(36)
  sessionToken String   @unique
  userId       String   @db.Char(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model User {
  id            String    @id @default(uuid()) @db.Char(36)
  name          String?
  slug          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  likes         Like[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
