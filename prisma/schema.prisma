// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// imadedis.dev models
model Project {
  id            String        @id @default(uuid()) @db.VarChar(36)
  name          String
  slug          String
  version       String
  description   String?       @db.Text
  websiteUrl    String?       @map("website_url") @db.VarChar(2048)
  downloadUrl   String?       @map("download_url") @db.VarChar(2048)
  repositoryUrl String?       @map("repository_url") @db.VarChar(2048)
  status        ProjectStatus @default(PUBLIC)

  // Audit fields
  createdBy  String   @map("created_by") @db.VarChar(36)
  createdAt  DateTime @default(now()) @map("created_at")
  modifiedBy String   @map("modified_by") @db.VarChar(36)
  modifiedAt DateTime @updatedAt @map("modified_at")

  @@map("project")
}

enum ProjectStatus {
  PUBLIC
  PRIVATE
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(uuid()) @db.VarChar(36)
  userId                   String  @db.VarChar(36)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int? // Necessary for GitHub
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(uuid()) @db.VarChar(36)
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(uuid()) @db.VarChar(36)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
